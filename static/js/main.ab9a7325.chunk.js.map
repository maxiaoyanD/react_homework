{"version":3,"sources":["Showtime.js","TodoList/Todoinput.js","TodoList/Todoing.js","TodoList/Todolist.js","index.js"],"names":["Component","Todoinput","handleChange","e","setState","target","name","parseInt","value","handleInput","keyCode","props","add","state","a","b","c","console","log","this","refs","focus","ref","onChange","onKeyDown","type","inp","onClick","Todoing","idx","del","todo","map","item","key","delItem","bind","prototypes","PropTypes","array","func","defaultProps","Todolist","addItem","data","splice","o","obj","Object","assign","keys","forEach","ReactDOM","render","document","getElementById","className"],"mappings":"yOAEuBA,Y,oBCCFC,E,YAajB,aAAc,IAAD,8BACT,+CAOJC,aAAe,SAACC,GAEZ,EAAKC,SAAL,eACKD,EAAEE,OAAOC,KAAMC,SAA2B,MAAlBJ,EAAEE,OAAOG,MAAe,EAAIL,EAAEE,OAAOG,UAXzD,EAebC,YAAc,SAACN,GAEM,KAAdA,EAAEO,SACD,EAAKC,MAAMC,IAAIT,EAAEE,OAAOG,QAhB5B,EAAKK,MAAQ,CACTC,EAAE,GACFC,EAAE,GACFC,EAAE,IALG,E,iFAuBTC,QAAQC,IAAIC,MACZA,KAAKC,KAAKN,EAAEO,U,+BAGN,IAAD,OACL,OACI,6BAEI,2BAAOC,IAAI,IAAIhB,KAAK,IAAIE,MAAOW,KAAKN,MAAMC,EAAGS,SAAUJ,KAAKjB,aAAcsB,UAAWL,KAAKV,YAAagB,KAAK,SAFhH,IAII,2BAAOnB,KAAK,IAAIE,MAAOW,KAAKN,MAAME,EAAGQ,SAAUJ,KAAKjB,aAAcsB,UAAWL,KAAKV,YAAagB,KAAK,SAJxG,IAMI,2BAAOnB,KAAK,IAAIE,MAAOW,KAAKN,MAAMG,EAAGO,SAAUJ,KAAKjB,aAAcsB,UAAWL,KAAKV,YAAagB,KAAK,SANxG,IAQI,2BAAIN,KAAKN,MAAMC,EAAGK,KAAKN,MAAME,EAAEI,KAAKN,MAAMG,GAE1C,2BAAOM,IAAK,SAACI,GAAS,EAAKA,IAAMA,GAAMD,KAAK,SAC5C,4BAAQE,QAAS,WAAOV,QAAQC,IAAI,EAAKQ,IAAIlB,SAA7C,qB,GArDuBR,a,gBCDlB4B,E,gLACTC,GACJV,KAAKR,MAAMmB,IAAID,K,+BAET,IAAD,OACAE,EAAQZ,KAAKR,MAAboB,KACL,OACI,4BAGQA,EAAKC,KAAI,SAACC,EAAKJ,GAAN,OACJ,wBAAIK,IAAKL,GACLI,EADJ,OACa,4BAAQN,QAAS,EAAKQ,QAAQC,KAAK,EAAKP,IAAxC,yB,GAZD7B,aAqBrC4B,EAAQS,WAAa,CACjBN,KAAKO,IAAUC,MACfT,IAAIQ,IAAUE,MAGlBZ,EAAQa,aAAe,CACnBV,KAAK,CAAC,EAAE,EAAE,EAAE,I,ICvBKW,E,YAEjB,aAAc,IAAD,uBACT,+CA2BJC,QAAU,SAACC,GAEP,EAAKxC,SAAS,CACV2B,KAAK,GAAD,mBAAK,EAAKlB,MAAMkB,MAAhB,CAAqBa,OA/BpB,EAkCbT,QAAU,SAACN,EAAI1B,GAEX,IAAI4B,EAAI,YAAO,EAAKlB,MAAMkB,MAC1BA,EAAKc,OAAOhB,EAAI,GAEhB,EAAKzB,SAAS,CACV2B,KAAKA,KAtCT,EAAKlB,MAAQ,CACTkB,KAAK,CAAC,EAAE,EAAE,KAIVe,EADAC,EAAM,CAACjC,EAAE,MAEXA,EAAI,IACNG,QAAQC,IAAI6B,GAEZ,IAIID,EAJAC,EAAM,CAACjC,EAAE,IAAIC,EAAE,CAAC,EAAE,EAAE,IAXf,OAeL+B,EAAIE,OAAOC,OAAOF,EAHZ,CAAC/B,EAAE,OAIXF,EAAI,IACNgC,EAAE/B,EAAE,GAAK,EACTE,QAAQC,IAAI6B,GACZ9B,QAAQC,IAAK4B,IAAMC,GAGnBC,OAAOE,KAAKH,GAAKI,SAAQ,SAAClB,GACtBhB,QAAQC,IAAIe,GACZhB,QAAQC,IAAI6B,EAAId,OAxBX,E,sEA6CT,OACI,6BACI,kBAAC,EAAD,CAAWrB,IAAKO,KAAKwB,UAErB,kBAAC,EAAD,CAASZ,KAAMZ,KAAKN,MAAMkB,KAAMD,IAAKX,KAAKgB,e,GAnDpBnC,aCuBtCoD,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,SA2GlBD,SAASC,eAAe,QAK9BC,UAAY,W","file":"static/js/main.ab9a7325.chunk.js","sourcesContent":["import React,{Fragment,Component} from 'react';\r\n//类定义组件\r\nclass ShowTime extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            time: new Date().toLocaleString(),\r\n            a: 100,\r\n            b: 200\r\n        }\r\n        console.log('constructor')\r\n        setTimeout(()=>{\r\n            this.setState({\r\n                time: new Date().toLocaleString()\r\n            })\r\n        },1000)\r\n    }\r\n    shouldComponentUpdate(){\r\n        if(this.state.a>10){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    componentDidUpdate(preProps,preState,data){\r\n        console.log('didupdate');\r\n        console.log(preState)\r\n        console.log(this.state.time)\r\n    }\r\n    getSnapshotBeforeUpdate(){\r\n        console.log('getSnapshot');\r\n        return {name: this.state.a}\r\n    }\r\n    componentDidMount(){\r\n        console.log('didmount');\r\n    }\r\n    render(){\r\n        console.log('render');\r\n        var {name,age} = this.props;\r\n        return (\r\n            <Fragment>\r\n                {/* 条件渲染 */}\r\n                {name.length>5?<div>姓名：{name}</div>:''}\r\n                {name.length>5&&<div>姓名：{name}</div>}\r\n                <div>{this.state.time}</div>\r\n                {/* 循环渲染 */}\r\n                <div>\r\n                    {\r\n                        age.map((item,index)=>{\r\n                            if(index%2 === 0){\r\n                                return <p key={index}>{item}</p>\r\n                            }\r\n                        })\r\n                    }\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n//默认导出：只能导出一次，被引入时可以重命名\r\nexport default ShowTime;\r\n\r\n//命名导出:可以导出多个，被引入时与导出名相同\r\n//export {ShowTime};\r\n//导入是必须加{}  import {ShowTime} from './Showtime';\r\n//export const num=100;","import React, { Component } from 'react'\r\n//受控组件：value值被react控制的表单元素\r\n//可以实时获取表单元素的值（表单验证）\r\nexport default class Todoinput extends Component {\r\n    //类的方法不能拿到this的\r\n    // constructor(){\r\n    //     super();\r\n    //     this.handleInput = this.handleInput.bind(this);\r\n    //     //没有这个HandelInput直接this.props.add()会报错，因为类的方法不能拿到this的\r\n    // }\r\n    // handleInput(e){\r\n    //     if(e.keyCode === 13){\r\n    //         console.log(e.target.value);\r\n    //         this.props.add();//直接在父组件拿属性调用\r\n    //     }\r\n    // }\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            a:'',\r\n            b:'',\r\n            c:''\r\n        }\r\n    }\r\n    handleChange = (e) => {\r\n        \r\n        this.setState({\r\n            [e.target.name]:parseInt(e.target.value ===\" \" ? 0 : e.target.value)\r\n            //不加[]表示是一个字符串\r\n        })\r\n    }\r\n    handleInput = (e)=>{\r\n         //绑定this，时间处理函数写成箭头函数，或者用bind绑定\r\n        if(e.keyCode === 13){\r\n            this.props.add(e.target.value);//直接在父组件拿属性调用\r\n        }\r\n    }\r\n    //render执行完之后会调用这个函数\r\n    componentDidMount(){\r\n        console.log(this)\r\n        this.refs.a.focus();\r\n    }\r\n    //类的方法\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/* 获取节点用ref */}\r\n                <input ref=\"a\" name=\"a\" value={this.state.a} onChange={this.handleChange} onKeyDown={this.handleInput} type=\"text\"/>\r\n                +\r\n                <input name=\"b\" value={this.state.b} onChange={this.handleChange} onKeyDown={this.handleInput} type=\"text\"/>\r\n                +\r\n                <input name=\"c\" value={this.state.c} onChange={this.handleChange} onKeyDown={this.handleInput} type=\"text\"/>\r\n                =\r\n                <p>{this.state.a +this.state.b+this.state.c}</p>\r\n                {/* 非受控组件:一次性获取或处理表单元素的值 */}\r\n                <input ref={(inp) => {this.inp = inp}} type=\"text\"/>\r\n                <button onClick={() => {console.log(this.inp.value)}}>提交</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n/**\r\n * 受控组件\r\n */\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nexport default class Todoing extends Component {\r\n    delItem(idx){\r\n        this.props.del(idx);\r\n    }\r\n    render() {\r\n        var {todo} = this.props;\r\n        return (\r\n            <ul>\r\n                {/* 循环渲染li */}\r\n                {\r\n                    todo.map((item,idx) => \r\n                         <li key={idx}>\r\n                            {item}----<button onClick={this.delItem.bind(this,idx)}>删除</button>\r\n                        </li>\r\n                    )\r\n                }\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n//这里需要引入Prototypes包\r\nTodoing.prototypes = {\r\n    todo:PropTypes.array,\r\n    del:PropTypes.func\r\n}\r\n//设置默认值，这里不需要引入Prototypes包\r\nTodoing.defaultProps = {\r\n    todo:[1,2,3,4]\r\n}","// 将ToDoList引入到index里，将todoing和todoinput引入到ToDoList里\r\nimport React, { Component } from 'react'\r\nimport Todoinput from './Todoinput'\r\nimport Todoing from './Todoing'\r\n\r\n\r\nexport default class Todolist extends Component {\r\n    //将父组件的东西传到子组件\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            todo:[1,2,3]//属性\r\n        }\r\n        //深拷贝\\浅拷贝\r\n        var obj = {a:100};\r\n        var o = obj;\r\n        o.a = 200;\r\n        console.log(obj);//200\r\n\r\n        var obj = {a:100,b:[1,2,3]};\r\n        var obj1= {c:300};\r\n        // var o = {...obj};//o和obj不是一个\r\n        // var o = JSON.parse(JSON.stringify(obj))\r\n        var o = Object.assign(obj,obj1);\r\n        o.a = 200;\r\n        o.b[0] = 0;\r\n        console.log(obj);//100,[0,2,3];\r\n        console.log( o === obj);\r\n        //遍历数组\r\n        //Object.keys(obj)传进一个对象，返回对象的数组\r\n        Object.keys(obj).forEach((item)=>{\r\n            console.log(item);\r\n            console.log(obj[item]);\r\n        })\r\n        \r\n    }\r\n    addItem = (data) =>{\r\n        //修改this指向\r\n        this.setState({\r\n            todo:[...this.state.todo,data]\r\n        })\r\n    }\r\n    delItem = (idx,e)=>{\r\n        //1、state不能直接改变或处理state，通过setState改变\r\n        let todo = [...this.state.todo];//拷贝数组\r\n        todo.splice(idx,1)//删除数组的指定位置\r\n        //2、setState是异步执行的\r\n        this.setState({\r\n            todo:todo\r\n        })\r\n        \r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Todoinput add={this.addItem}/>\r\n               {/* 这里的属性名可以随便取 ，将子组件的属性传过去*/}\r\n                <Todoing todo={this.state.todo} del={this.delItem}/>\r\n                {/* <Todoing todo={this.state.todo} del={this.delItem}/> */}\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React,{Fragment,Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport ShowTime from './Showtime';\nimport './index.css';\nimport Todolist from './TodoList/Todolist'\n// 函数声明组件\n// function ShowTime(props){\n//     console.log(props);\n//     return (<Fragment>\n//                 <div>{props.name}{props.age}</div>\n//                 <div>\n//                     {new Date().toLocaleString()}\n//                 </div>\n//             </Fragment>\n//         )\n// }\n\n// 类定义组件\n\n// 组件交互：\n// 父组件---->子组件：调用子组件是添加属性，子组件通过props拿到对应的传递的数据\n\n// var num = [1,2,3,4,5];\n// ReactDOM.render(\n//     <ShowTime age={num} name=\"zhangsan\"/>,\n//     document.getElementById('root')\n// )\n\n//ReactDom.render只有一个，将要显示的根引入到这里\nReactDOM.render(\n    <Todolist/>,\n    document.getElementById('root')\n)\n// function Hello(){\n    \n// }\n// ReactDOM.render(\n//     <Hello/>,document.getElementById('root')\n// )\n// 显示当前系统时间\n// function showTime(){\n//     var ele = <div>\n//                 <p>当前时间是：</p>\n//                 <div>{new Date().toLocaleString()}</div>;\n//             </div>;\n//     ReactDOM.render(\n//         ele,\n//         document.querySelector('#root')\n//     );\n// } \n// showTime();\n// setInterval(showTime,1000);\n\n\n\n\n\n// react技术栈\n// jsx语法\n// var ele = <h1 class=\"tit\">hello <p>react</p></h1>;\n// babel编译，返回一个对象\n// var ele = React.createElement(\n//     'h1',\n//     {id:'tit',class:'title'},\n//     'hello',\n//     React.createElement(\n//         'p',\n//         {id:'t',class:'tit'},\n//         'react')\n// );\n// ReactDOM.render(ele, document.getElementById('root'));\n// 自己封装render函数\nvar obj = {\n    type: 'div',\n    props: {\n        id: 'box',\n        class: 'box',\n        children: [\n            'hello',\n            'react',\n            {\n                type: 'h1',\n                props: {\n                    id: 'tit',\n                    class: 'tit',\n                    children: [\n                        'title',\n                        'react'\n                    ]\n                }\n            }\n        ]\n    }\n}\nfunction render(obj,container){\n    var {type,props} = obj;\n    // 文档碎片\n    var fragment = document.createDocumentFragment();\n\n    var ele = document.createElement(type);\n    for(var item in props){\n        if(item === 'class'){\n            ele.className = props[item]\n        }else if(item === 'children'){\n            for(var i=0;i<props.children.length;i++){\n                // ele.innerHTML += props.children[i];\n                if(typeof props.children[i] === 'object'){\n                    render(props.children[i],ele);\n                }else{\n                    var txt = document.createTextNode(props.children[i]);\n                    ele.appendChild(txt);\n                }\n            }\n        }else{\n            ele[item] = props[item];\n        }\n    }\n    fragment.appendChild(ele);\n    container.appendChild(fragment);\n}\n// render(obj,document.getElementById('root'));\n// 页面渲染过程\n// 请求HTML页面、浏览器HTML解析器解析html文件、生成DOM树\n// link引入css文件、css解析器解析CSS，生成CSS对象模型，CSSOM和DOM tree结合生成一个render tree，最后浏览器绘制页面\n\n// 页面回流（重排reflow）：DOM结构变化、内容变化、大小、位置的变化、显示的变化\n// 页面重绘（repaint）：颜色的变化（背景色、字体颜色、边框颜色）\n\n// 1、先用变量进行dom处理，最后一次渲染\n// console.time('time');\n// var div = document.getElementById('root');\n// var str = ''\n// for(var i=0;i<1000;i++){\n//     str += '<p>'+i+'</p>';\n// }\n// div.innerHTML = str;\n// console.timeEnd('time');\n// 2、对于样式处理,声明一个css类\nvar div = document.getElementById('root');\n// div.style.width = '100px';\n// div.style.height = '100px';\n// div.style.background = 'red';\n\ndiv.className = 'active';\n// 3、offsetLeft、offsetWidth等都会引起回流，要慎用\n// console.log(div.offsetLeft);\n// var wid = div.offsetWidth;\n// setInterval(()=>{\n//     wid += 1;\n//     div.style.width = wid + 'px';\n// },100)\n// 4、文档碎片（内存中的一个变量）"],"sourceRoot":""}